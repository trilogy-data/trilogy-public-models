
import std.display;
import std.ranking;
import std.semantic;
import std.money;

type letter_grade string;

key id int;
property id.age float;
property id.survived int::flag; # 1 if survived, 0 if not
property id.name string;
property id.class int::grade; # Integer classes; 1st, 2nd, 3rd
property id.fare float::usd; # Cost of fare, as float
property id.cabin string;
property id.embarked string;
property id.ticket string;
metric survived_count <- sum(survived); # Number of survivors
property last_name <- split(name,',')[1];

auto survival_rate <- (survived_count / id.count)::float::percent;

auto cabin_deck<- substring(cabin, 1, 1)::string::letter_grade;

auto age_bucket <- case
    when age <= 12 then 'child'
    when age between 13 and 19 then 'teenager'
    when age between 20 and 35 then 'young adult'
    when age between 36 and 59 then 'adult'
    when age >= 60 then 'elderly'
    else 'unknown'
  end;

auto gender <- CASE
        WHEN strpos(name, 'Master.') > 0 THEN 'Male'
        WHEN strpos(name, 'Mr.') > 0 THEN 'Male'
        WHEN strpos(name, 'Mrs.') > 0 THEN 'Female'
        WHEN strpos(name, 'Miss.') > 0 THEN 'Female'
        WHEN strpos(name, 'Ms.') > 0 THEN 'Female'
        WHEN strpos(name, 'Mlle.') > 0 THEN 'Female'
        WHEN strpos(name, 'Mme.') > 0 THEN 'Female'
        WHEN strpos(name, 'Lady.') > 0 THEN 'Female'
        WHEN strpos(name, 'Countess.') > 0 THEN 'Female'
        WHEN strpos(name, 'Dona.') > 0 THEN 'Female'
        WHEN strpos(name, 'Capt.') > 0 THEN 'Male'
        WHEN strpos(name, 'Col.') > 0 THEN 'Male'
        WHEN strpos(name, 'Dr.') > 0 THEN 'Male'
        WHEN strpos(name, 'Maj.') > 0 THEN 'Male'
        WHEN strpos(name, 'Major.') > 0 THEN 'Male'
        WHEN strpos(name, 'Sir') > 0 THEN 'Male'
        WHEN strpos(name, 'Jonkheer.') > 0 THEN 'Male'
        WHEN strpos(name, 'Rev.') > 0 THEN 'Male'
        WHEN strpos(name, 'Don') >0 THEN 'Male'
        ELSE 'Unknown'
    END; # 'Male' | 'Female' | 'Unknown' ; inferred from name/title

datasource raw_data (
    passengerid: id,
    age: ?age,
    survived: survived,
    pclass: class,
    name: name,
    fare: fare,
    cabin: ?cabin,
    embarked: ?embarked,
    ticket: ticket
    )
grain (id)
address raw_titanic;
