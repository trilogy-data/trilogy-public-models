import item as item;
import date as date;
import date as return_date;
import time as time;
import time as return_time;
import customer as customer;
import customer as return_customer;
import promotion as promotion;
import customer_demographic as customer_demographic;
import store as store;
import store as return_store;

key ticket_number int;
property <item.id,ticket_number>.quantity int;
property <item.id,ticket_number>.sales_price float;
property <item.id,ticket_number>.list_price float;
property <item.id,ticket_number>.ext_sales_price float;
property <item.id,ticket_number>.ext_wholesale_cost float;
property <item.id,ticket_number>.ext_list_price float;
property <item.id,ticket_number>.ext_discount_amount float;
property <item.id,ticket_number>.coupon_amt float;
property <item.id,ticket_number>.net_profit float;
property <item.id,ticket_number>.is_returned bool;
property <item.id,ticket_number>.net_paid float;
property <item.id,ticket_number>.return_amount float;
property <item.id,ticket_number>.return_net_loss float;
property profit <- ext_list_price - ext_wholesale_cost - ext_discount_amount + ext_sales_price;

datasource store_sales (
    SS_SOLD_DATE_SK: ~?date.id,
    SS_SOLD_TIME_SK: ~?time.id,
    SS_CUSTOMER_SK: ~?customer.id,
    SS_CDEMO_SK: ~?customer_demographic.id,
    SS_TICKET_NUMBER: ticket_number,
    SS_ITEM_SK: item.id,
    SS_SALES_PRICE: ?sales_price,
    SS_LIST_PRICE: ?list_price,
    SS_EXT_SALES_PRICE: ?ext_sales_price,
    SS_EXT_LIST_PRICE: ?ext_list_price,
    SS_EXT_WHOLESALE_COST: ?ext_wholesale_cost,
    SS_EXT_DISCOUNT_AMT: ?ext_discount_amount,
    SS_NET_PROFIT: ?net_profit,
    SS_PROMO_SK: ~?promotion.id,
    SS_QUANTITY: ?quantity,
    SS_COUPON_AMT: ?coupon_amt,
    SS_STORE_SK: ?~store.id,
    SS_NET_PAID: ?net_paid
    )
grain (item.id,ticket_number)
address memory.store_sales;
datasource store_returns (
    SR_RETURNED_DATE_SK: ?~return_date.id,
    SR_RETURN_TIME_SK: ?~return_time.id,
    SR_ITEM_SK: ~item.id,
    SR_CUSTOMER_SK: ?~return_customer.id,
    SR_RETURN_AMT: ?return_amount,
    SR_TICKET_NUMBER: ~ticket_number,
    SR_STORE_SK: ~?return_store.id,
    SR_NET_LOSS: ?return_net_loss,
    bool(return_time.id): is_returned
    )
grain (item.id,ticket_number)
address memory.store_returns;